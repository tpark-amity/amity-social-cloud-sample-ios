// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name UpstraUIKit
import AVFoundation
import AVKit
import CoreLocation
import EkoChat
import Foundation
import MobileCoreServices
import Photos
import PhotosUI
import QuartzCore
import Swift
import UIKit
@_exported import UpstraUIKit
import os
@objc @_hasMissingDesignatedInitializers public class EkoCommunityHomePageViewController : UpstraUIKit.EkoPageViewController {
  final public let newsFeedVC: UpstraUIKit.EkoNewsfeedViewController
  final public let exploreVC: UpstraUIKit.EkoExploreViewController
  @objc override dynamic public func viewDidLoad()
  public static func make() -> UpstraUIKit.EkoCommunityHomePageViewController
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
public protocol EkoPhotoCollectionViewCellDelegate : ObjectiveC.NSObjectProtocol {
  func collectionViewCellWillZoomOnPhoto(_ cell: UpstraUIKit.EkoPhotoCollectionViewCell)
}
@objc @_inheritsConvenienceInitializers open class EkoPhotoCollectionViewCell : UIKit.UICollectionViewCell {
  public var scrollView: UpstraUIKit.EkoPhotoScrollView! {
    get
  }
  public var imageView: UIKit.UIImageView! {
    get
  }
  open var minimumZoomScale: CoreGraphics.CGFloat {
    get
    set
  }
  open var maximumZoomScale: CoreGraphics.CGFloat {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open func layoutSubviews()
  @objc deinit
}
extension EkoPhotoCollectionViewCell : UIKit.UIScrollViewDelegate {
  @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @objc dynamic public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  @objc dynamic public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
}
@objc @_inheritsConvenienceInitializers public class EkoDocument : UIKit.UIDocument {
  @objc override dynamic public func contents(forType typeName: Swift.String) throws -> Any
  @objc override dynamic public func load(fromContents contents: Any, ofType typeName: Swift.String?) throws
  @objc override dynamic public init(fileURL url: Foundation.URL)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class EkoFilePicker : ObjectiveC.NSObject {
  public func present(from sourceView: UIKit.UIView, files: [UpstraUIKit.EkoFile])
  public func present(from sourceView: UIKit.UIView)
  @objc deinit
  @objc override dynamic public init()
}
extension EkoFilePicker : UIKit.UIDocumentPickerDelegate {
  @objc dynamic public func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentsAt urls: [Foundation.URL])
  @objc dynamic public func documentPickerWasCancelled(_ controller: UIKit.UIDocumentPickerViewController)
}
extension EkoFilePicker : UIKit.UINavigationControllerDelegate {
}
@objc @_inheritsConvenienceInitializers public class EkoButtonPagerTabSViewController : UpstraUIKit.EkoPagerTabViewController, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource {
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc override public func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
  @objc deinit
}
public protocol EkoMessageCellProtocol : UIKit.UITableViewCell {
  static var cellIdentifier: Swift.String { get }
  func display(message: UpstraUIKit.EkoMessageModel)
}
extension EkoMessageCellProtocol {
  public static var cellIdentifier: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers final public class EkoFeedViewController : UpstraUIKit.EkoViewController {
  public static func make(feedType: UpstraUIKit.FeedType) -> UpstraUIKit.EkoFeedViewController
  @objc override final public func viewDidLoad()
  @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension EkoFeedViewController : UIKit.UITableViewDataSource {
  @objc final public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension EkoFeedViewController : UIKit.UITableViewDelegate {
  @objc final public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc final public func tableView(_ tableView: UIKit.UITableView, didEndDisplaying cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc final public func tableView(_ tableView: UIKit.UITableView, estimatedHeightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc final public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @objc final public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreGraphics.CGFloat
}
public class EkoUserProfilePageSettings {
  public init()
  public var shouldChatButtonHide: Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class EkoUserProfilePageViewController : UpstraUIKit.EkoProfileViewController {
  public static func make(withUserId userId: Swift.String, settings: UpstraUIKit.EkoUserProfilePageSettings = EkoUserProfilePageSettings()) -> UpstraUIKit.EkoUserProfilePageViewController
  @objc override final public func viewDidLoad()
  @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @objcMembers open class EkoImagePickerController : UIKit.UINavigationController {
  weak public var imagePickerDelegate: UpstraUIKit.EkoImagePickerControllerDelegate?
  @objc public var settings: UpstraUIKit.Settings
  @objc public var doneButton: UIKit.UIBarButtonItem
  @objc public var cancelButton: UIKit.UIBarButtonItem
  @objc public var albumButton: UIKit.UIButton
  @objc public var selectedAssets: [Photos.PHAsset] {
    @objc get
  }
  @objc public var doneButtonTitle: Swift.String
  @objc public init(selectedAssets: [Photos.PHAsset] = [])
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func viewDidLoad()
  @objc deinit
  @available(iOS 5.0, *)
  @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
public struct EkoCommunityCategoryModel {
  public let name: Swift.String
  public let categoryId: Swift.String
}
extension UIColor {
  #warning("Remove this after migrating with EkoColor")
  #warning("Remove this after migrating with EkoColor")
  #warning("Remove this after migrating with EkoColor")
  #warning("Remove this after migrating with EkoColor")
  #warning("Remove this after migrating with EkoColor")
  #warning("Remove this after migrating with EkoColor")
}
@objc @_hasMissingDesignatedInitializers public class EkoPostDetailViewController : UpstraUIKit.EkoViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension EkoPostDetailViewController : UIKit.UITableViewDataSource {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension EkoPostDetailViewController : UIKit.UITableViewDelegate {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
}
extension EkoPostDetailViewController : UpstraUIKit.EkoExpandableLabelDelegate {
  public func expandableLabeldidTap(_ label: UpstraUIKit.EkoExpandableLabel)
  public func willExpandLabel(_ label: UpstraUIKit.EkoExpandableLabel)
  public func didExpandLabel(_ label: UpstraUIKit.EkoExpandableLabel)
  public func willCollapseLabel(_ label: UpstraUIKit.EkoExpandableLabel)
  public func didCollapseLabel(_ label: UpstraUIKit.EkoExpandableLabel)
}
extension EkoPostDetailViewController {
  public func postViewController(_ viewController: UIKit.UIViewController, didCreatePost post: UpstraUIKit.EkoPostModel)
  public func postViewController(_ viewController: UIKit.UIViewController, didUpdatePost post: UpstraUIKit.EkoPostModel)
}
@objc @_hasMissingDesignatedInitializers final public class EkoCategoryPreviewViewController : UIKit.UIViewController {
  final public var selectedCategoryHandler: ((UpstraUIKit.EkoCommunityCategoryModel) -> Swift.Void)?
  final public var selectedCategoriesHandler: (() -> Swift.Void)?
  @objc override final public func viewDidLoad()
  public static func make() -> UpstraUIKit.EkoCategoryPreviewViewController
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension EkoCategoryPreviewViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension EkoCategoryPreviewViewController : UIKit.UICollectionViewDataSource {
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
public enum EkoAvatarShape {
  case circle
  case square
  case custom(radius: CoreGraphics.CGFloat, borderWith: CoreGraphics.CGFloat, borderColor: UIKit.UIColor)
}
public enum EkoAvatarState {
  case idle
  case loading
  public static func == (a: UpstraUIKit.EkoAvatarState, b: UpstraUIKit.EkoAvatarState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class EkoAvatarView : UpstraUIKit.EkoView {
  final public var actionHandler: (() -> Swift.Void)?
  final public var state: UpstraUIKit.EkoAvatarState {
    get
    set
  }
  final public var avatarShape: UpstraUIKit.EkoAvatarShape {
    get
    set
  }
  final public var image: UIKit.UIImage? {
    get
    set
  }
  final public var placeholder: UIKit.UIImage? {
    get
    set
  }
  @objc override final public func awakeFromNib()
  @objc convenience dynamic public init()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class UpstraUIKitManager {
  public static func setup(_ apiKey: Swift.String)
  public static func registerDevice(withUserId userId: Swift.String, displayName: Swift.String?, authToken: Swift.String? = nil)
  public static func unregisterDevice()
  public static var client: EkoChat.EkoClient {
    get
  }
  public static func set(theme: UpstraUIKit.EkoTheme)
  public static func set(typography: UpstraUIKit.EkoTypography)
  public static func set(eventHandler: UpstraUIKit.EkoEventHandler)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class EkoEditUserProfileViewController : UpstraUIKit.EkoViewController {
  public static func make() -> UpstraUIKit.EkoEditUserProfileViewController
  @objc override final public func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension EkoEditUserProfileViewController : UIKit.UITextFieldDelegate {
  @objc final public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
extension EkoEditUserProfileViewController : UIKit.UIImagePickerControllerDelegate & UIKit.UINavigationControllerDelegate {
  @objc final public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
}
#warning("should be renamed to PostTargetSelectionScreenViewModel")
public struct EkoCommunityModel {
  public let communityId: Swift.String
}
public struct EkoSettings {
}
@objc @_hasMissingDesignatedInitializers public class EkoNewsfeedViewController : UpstraUIKit.EkoViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  public static func make() -> UpstraUIKit.EkoNewsfeedViewController
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
public protocol EkoPhotoViewerBaseAnimator : UIKit.UIViewControllerAnimatedTransitioning {
  var presentingDuration: Foundation.TimeInterval { get set }
  var dismissingDuration: Foundation.TimeInterval { get set }
  var usesSpringAnimation: Swift.Bool { get set }
}
@objc @_inheritsConvenienceInitializers public class EkoPhotoAnimator : ObjectiveC.NSObject, UpstraUIKit.EkoPhotoViewerBaseAnimator {
  public var presentingDuration: Swift.Double
  public var dismissingDuration: Swift.Double
  public var usesSpringAnimation: Swift.Bool
  @objc public func transitionDuration(using transitionContext: UIKit.UIViewControllerContextTransitioning?) -> Foundation.TimeInterval
  @objc public func animateTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
  @objc public func animationEnded(_ transitionCompleted: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
}
public enum EkoNavigationBarType {
  case root
  case present
  case push
  case custom
  public static func == (a: UpstraUIKit.EkoNavigationBarType, b: UpstraUIKit.EkoNavigationBarType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers public class EkoViewController : UIKit.UIViewController {
  public var navigationBarType: UpstraUIKit.EkoNavigationBarType {
    get
    set
  }
  @objc override dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct EkoLocalizedStringSet {
  public static let newsfeedTitle: Swift.String
  public static let exploreTitle: Swift.String
  public static let communityHomeTitle: Swift.String
  public static let timelineTitle: Swift.String
}
@objc @_hasMissingDesignatedInitializers public class EkoUserFeedViewController : UpstraUIKit.EkoViewController {
  public static func makeMyFeed() -> UpstraUIKit.EkoUserFeedViewController
  public static func makeUserFeed(withUserId userId: Swift.String) -> UpstraUIKit.EkoUserFeedViewController
  @objc override dynamic public func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
@objc @_inheritsConvenienceInitializers @IBDesignable public class EkoImagePickerImageView : UIKit.UIView {
  @objc override dynamic public var isUserInteractionEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc override dynamic public var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension EkoImagePickerImageView {
  convenience public init(image: UIKit.UIImage?)
  convenience public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @objc @IBInspectable dynamic open var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable dynamic open var highlightedImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  open var animationImages: [UIKit.UIImage]? {
    get
    set
  }
  open var highlightedAnimationImages: [UIKit.UIImage]? {
    get
    set
  }
  open var animationDuration: Foundation.TimeInterval {
    get
    set
  }
  open var animationRepeatCount: Swift.Int {
    get
    set
  }
  open func startAnimating()
  open func stopAnimating()
  open var isAnimating: Swift.Bool {
    get
  }
}
public struct EkoTheme {
  public init(primary: UIKit.UIColor? = nil, secondary: UIKit.UIColor? = nil, alert: UIKit.UIColor? = nil, highlight: UIKit.UIColor? = nil, base: UIKit.UIColor? = nil, baseInverse: UIKit.UIColor? = nil, messageBubble: UIKit.UIColor? = nil, messageBubbleInverse: UIKit.UIColor? = nil)
}
extension EkoPhotoViewerController : UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc dynamic open func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc dynamic open func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @objc dynamic open func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @objc dynamic open func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @objc dynamic open func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
#warning("should be renmae to EkoCommunityProfileEditScreenViewModel")
@objc @_hasMissingDesignatedInitializers final public class EkoMyCommunityPreviewViewController : UIKit.UIViewController {
  @objc override final public func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension EkoMyCommunityPreviewViewController : UIKit.UICollectionViewDelegate {
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension EkoMyCommunityPreviewViewController : UIKit.UICollectionViewDataSource {
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
final public class EkoMessageModel {
  final public var messageId: Swift.String
  final public var userId: Swift.String
  final public var displayName: Swift.String?
  final public var syncState: EkoChat.EkoSyncState
  final public var isDeleted: Swift.Bool
  final public var isEdited: Swift.Bool
  final public var messageType: EkoChat.EkoMessageType
  final public var createdAtDate: Foundation.Date
  final public var date: Swift.String
  final public var time: Swift.String
  final public var data: [Swift.AnyHashable : Any]?
  final public var isOwner: Swift.Bool {
    get
  }
  public init(object: EkoChat.EkoMessage)
  @objc deinit
}
public class EkoMessageReadmoreModel {
  public var shouldShowReadmore: Swift.Bool?
  public var isExpanded: Swift.Bool?
  public var messageId: Swift.String
  public init(messageId: Swift.String, shouldShowReadmore: Swift.Bool? = nil, isExpanded: Swift.Bool? = nil)
  @objc deinit
}
@objc public class EkoPhotoViewerController : UIKit.UIViewController {
  public var scrollDirection: UIKit.UICollectionView.ScrollDirection {
    get
    set
  }
  weak public var dataSource: UpstraUIKit.EkoPhotoViewerControllerDataSource?
  weak public var delegate: UpstraUIKit.EkoPhotoViewerControllerDelegate?
  open var shouldHideStatusBarOnPresent: Swift.Bool
  open var statusBarStyleOnPresenting: UIKit.UIStatusBarStyle
  open var statusBarAnimationStyle: UIKit.UIStatusBarAnimation
  open var statusBarStyleOnDismissing: UIKit.UIStatusBarStyle
  open var backgroundColor: UIKit.UIColor {
    get
    set
  }
  open var automaticallyUpdateReferencedViewVisibility: Swift.Bool {
    get
    set
  }
  open var scaleWhileDragging: Swift.Bool
  open var referenceSize: CoreGraphics.CGSize {
    get
  }
  public var imageView: UIKit.UIImageView {
    get
  }
  weak public var referencedView: UIKit.UIView? {
    get
  }
  public var scrollView: UIKit.UIScrollView {
    get
  }
  public var backgroundView: UIKit.UIView {
    get
  }
  public var panGestureRecognizer: UIKit.UIPanGestureRecognizer! {
    get
  }
  public var doubleTapGestureRecognizer: UIKit.UITapGestureRecognizer! {
    get
  }
  public var singleTapGestureRecognizer: UIKit.UITapGestureRecognizer! {
    get
  }
  open var animator: UpstraUIKit.EkoPhotoViewerBaseAnimator {
    get
    set
  }
  public init(referencedView: UIKit.UIView?, image: UIKit.UIImage?)
  convenience public init(referencedView: UIKit.UIView?, imageModel: UpstraUIKit.EkoImage)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillLayoutSubviews()
  @objc override dynamic open func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var preferredStatusBarUpdateAnimation: UIKit.UIStatusBarAnimation {
    @objc get
  }
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  open func didScrollToPhoto(at index: Swift.Int)
  open func didZoomOnPhoto(at index: Swift.Int, atScale scale: CoreGraphics.CGFloat)
  open func didEndZoomingOnPhoto(at index: Swift.Int, atScale scale: CoreGraphics.CGFloat)
  open func willZoomOnPhoto(at index: Swift.Int)
  open func didReceiveTapGesture()
  open func didReceiveDoubleTapGesture()
  open func willBegin(panGestureRecognizer gestureRecognizer: UIKit.UIPanGestureRecognizer)
  open func didEnd(panGestureRecognizer gestureRecognizer: UIKit.UIPanGestureRecognizer)
  open func didEndPresentingAnimation()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension EkoPhotoViewerController : UIKit.UIViewControllerTransitioningDelegate {
  @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
}
extension EkoPhotoViewerController : UIKit.UICollectionViewDataSource {
  public var currentPhotoIndex: Swift.Int {
    get
  }
  public var zoomScale: CoreGraphics.CGFloat {
    get
  }
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension EkoPhotoViewerController {
  open func registerClassPhotoViewer(_ cellClass: Swift.AnyClass?)
  open func registerNibForPhotoViewer(_ nib: UIKit.UINib?)
  open func reloadData()
  open func insertPhotos(at indexes: [Swift.Int], completion: ((Swift.Bool) -> Swift.Void)?)
  open func deletePhotos(at indexes: [Swift.Int], completion: ((Swift.Bool) -> Swift.Void)?)
  open func reloadPhotos(at indexes: [Swift.Int])
  open func movePhoto(at index: Swift.Int, to newIndex: Swift.Int)
  open func scrollToPhoto(at index: Swift.Int, animated: Swift.Bool)
}
extension EkoPhotoViewerController : UpstraUIKit.EkoPhotoCollectionViewCellDelegate {
  open func collectionViewCellDidZoomOnPhoto(_ cell: UpstraUIKit.EkoPhotoCollectionViewCell, atScale scale: CoreGraphics.CGFloat)
  open func collectionViewCellDidEndZoomingOnPhoto(_ cell: UpstraUIKit.EkoPhotoCollectionViewCell, atScale scale: CoreGraphics.CGFloat)
  open func collectionViewCellWillZoomOnPhoto(_ cell: UpstraUIKit.EkoPhotoCollectionViewCell)
}
public class EkoCommunityProfilePageSettings {
  public init()
  public var shouldChatButtonHide: Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class EkoCommunityProfilePageViewController : UpstraUIKit.EkoProfileViewController {
  @objc override final public func viewDidLoad()
  @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  public static func make(withCommunityId communityId: Swift.String, settings: UpstraUIKit.EkoCommunityProfilePageSettings = EkoCommunityProfilePageSettings()) -> UpstraUIKit.EkoCommunityProfilePageViewController
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public class EkoPostModel {
  public init(post: EkoChat.EkoPost)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class EkoPostTargetSelectionViewController : UpstraUIKit.EkoViewController {
  public static func make() -> UpstraUIKit.EkoPostTargetSelectionViewController
  @objc override final public func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension EkoPostTargetSelectionViewController : UIKit.UITableViewDataSource {
  @objc final public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension EkoPostTargetSelectionViewController : UIKit.UITableViewDelegate {
  @objc final public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc final public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc final public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @objc final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
public protocol EkoMessageListDataSource {
  func cellForMessageTypes() -> [UpstraUIKit.EkoMessageTypes : UpstraUIKit.EkoMessageCellProtocol.Type]
}
@objc @_hasMissingDesignatedInitializers final public class EkoMessageListViewController : UpstraUIKit.EkoViewController {
  final public var dataSource: UpstraUIKit.EkoMessageListDataSource?
  @objc override final public func viewDidLoad()
  @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  public static func make(channelId: Swift.String) -> UpstraUIKit.EkoMessageListViewController
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension EkoMessageListViewController : UIKit.UIImagePickerControllerDelegate & UIKit.UINavigationControllerDelegate {
  @objc final public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
}
public protocol EkoExpandableLabelDelegate : AnyObject {
  func willExpandLabel(_ label: UpstraUIKit.EkoExpandableLabel)
  func didExpandLabel(_ label: UpstraUIKit.EkoExpandableLabel)
  func willCollapseLabel(_ label: UpstraUIKit.EkoExpandableLabel)
  func didCollapseLabel(_ label: UpstraUIKit.EkoExpandableLabel)
  func expandableLabeldidTap(_ label: UpstraUIKit.EkoExpandableLabel)
}
@objc @_inheritsConvenienceInitializers open class EkoExpandableLabel : UIKit.UILabel {
  public enum TextReplacementType {
    case character
    case word
    public static func == (a: UpstraUIKit.EkoExpandableLabel.TextReplacementType, b: UpstraUIKit.EkoExpandableLabel.TextReplacementType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  weak open var delegate: UpstraUIKit.EkoExpandableLabelDelegate?
  @objc @IBInspectable open var shouldExpand: Swift.Bool
  @objc @IBInspectable open var shouldCollapse: Swift.Bool
  open var collapsedAttributedLink: Foundation.NSAttributedString! {
    get
    set
  }
  open var expandedAttributedLink: Foundation.NSAttributedString?
  open var ellipsis: Foundation.NSAttributedString? {
    get
    set
  }
  open var animationView: UIKit.UIView?
  open var textReplacementType: UpstraUIKit.EkoExpandableLabel.TextReplacementType
  @objc override dynamic open var numberOfLines: ObjectiveC.NSInteger {
    @objc get
    @objc set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc dynamic public init()
  @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set(text)
  }
  open var expandedText: Foundation.NSAttributedString? {
    get
  }
  @objc override dynamic open var attributedText: Foundation.NSAttributedString? {
    @objc get
    @objc set(attributedText)
  }
  open func setLessLinkWith(lessLink: Swift.String, attributes: [Foundation.NSAttributedString.Key : Swift.AnyObject], position: UIKit.NSTextAlignment?)
  @objc deinit
}
extension EkoExpandableLabel {
  @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class EkoButton : UIKit.UIButton {
  public enum Position {
    case left, right
    public static func == (a: UpstraUIKit.EkoButton.Position, b: UpstraUIKit.EkoButton.Position) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var touchUpHandler: (() -> Swift.Void)?
  @objc override dynamic public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public func awakeFromNib()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  public func setImage(_ image: UIKit.UIImage?, position: UpstraUIKit.EkoButton.Position = .right)
  public func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
public protocol BottomSheetComponent : UIKit.UIView {
  var componentHeight: CoreGraphics.CGFloat { get }
}
@objc @_inheritsConvenienceInitializers open class BottomSheetViewController : UIKit.UIViewController {
  @objc override dynamic open func loadView()
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  public func dismissBottomSheet(completion: (() -> Swift.Void)? = nil)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class EkoCategoryListViewController : UpstraUIKit.EkoViewController {
  public static func make() -> UpstraUIKit.EkoCategoryListViewController
  @objc override dynamic public func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension EkoCategoryListViewController : UIKit.UITableViewDataSource {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension EkoCategoryListViewController : UIKit.UITableViewDelegate {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BottomSheetSeparatorView : UIKit.UIView, UpstraUIKit.BottomSheetComponent {
  public var componentHeight: CoreGraphics.CGFloat {
    get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class EkoRecentChatViewController : UpstraUIKit.EkoViewController {
  final public var messageDataSource: UpstraUIKit.EkoMessageListDataSource?
  @objc override final public func viewDidLoad()
  public static func make() -> UpstraUIKit.EkoRecentChatViewController
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension EkoRecentChatViewController : UIKit.UITableViewDelegate {
  @objc final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc final public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
}
extension EkoRecentChatViewController : UIKit.UITableViewDataSource {
  @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@objc extension UIViewController {
  @objc dynamic public func presentImagePicker(_ imagePicker: UpstraUIKit.EkoImagePickerController, animated: Swift.Bool = true, select: ((Photos.PHAsset) -> Swift.Void)?, deselect: ((Photos.PHAsset) -> Swift.Void)?, cancel: (([Photos.PHAsset]) -> Swift.Void)?, finish: (([Photos.PHAsset]) -> Swift.Void)?, completion: (() -> Swift.Void)? = nil)
}
extension EkoImagePickerController {
  @objc public static var currentAuthorization: Photos.PHAuthorizationStatus {
    @objc get
  }
}
extension EkoImagePickerController : UpstraUIKit.EkoImagePickerControllerDelegate {
  @objc dynamic public func imagePicker(_ imagePicker: UpstraUIKit.EkoImagePickerController, didSelectAsset asset: Photos.PHAsset)
  @objc dynamic public func imagePicker(_ imagePicker: UpstraUIKit.EkoImagePickerController, didDeselectAsset asset: Photos.PHAsset)
  @objc dynamic public func imagePicker(_ imagePicker: UpstraUIKit.EkoImagePickerController, didFinishWithAssets assets: [Photos.PHAsset])
  @objc dynamic public func imagePicker(_ imagePicker: UpstraUIKit.EkoImagePickerController, didCancelWithAssets assets: [Photos.PHAsset])
  @objc dynamic public func imagePicker(_ imagePicker: UpstraUIKit.EkoImagePickerController, didReachSelectionLimit count: Swift.Int)
}
@objc @objcMembers public class AssetStore : ObjectiveC.NSObject {
  @objc public var assets: [Photos.PHAsset] {
    get
  }
  @objc public init(assets: [Photos.PHAsset] = [])
  @objc public var count: Swift.Int {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol EkoPhotoViewerControllerDataSource : ObjectiveC.NSObjectProtocol {
  @objc func numberOfItems(in photoViewerController: UpstraUIKit.EkoPhotoViewerController) -> Swift.Int
  @objc func photoViewerController(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController, configurePhotoAt index: Swift.Int, withImageView imageView: UIKit.UIImageView)
  @objc optional func photoViewerController(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController, configureCell cell: UpstraUIKit.EkoPhotoCollectionViewCell, forPhotoAt index: Swift.Int)
  @objc optional func photoViewerController(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController, referencedViewForPhotoAt index: Swift.Int) -> UIKit.UIView?
}
@objc @_hasMissingDesignatedInitializers final public class EkoTrendingCommunityViewController : UIKit.UIViewController {
  final public var selectedCommunityHandler: ((UpstraUIKit.EkoCommunityModel) -> Swift.Void)?
  @objc override final public func viewDidLoad()
  public static func make() -> UpstraUIKit.EkoTrendingCommunityViewController
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension EkoTrendingCommunityViewController : UIKit.UITableViewDelegate {
  @objc final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension EkoTrendingCommunityViewController : UIKit.UITableViewDataSource {
  @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@_hasMissingDesignatedInitializers public class EkoFile : Swift.Hashable, Swift.Equatable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: UpstraUIKit.EkoFile, rhs: UpstraUIKit.EkoFile) -> Swift.Bool
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class EkoImage : Swift.Equatable, Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: UpstraUIKit.EkoImage, rhs: UpstraUIKit.EkoImage) -> Swift.Bool
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class EkoCategoryCommunityListViewController : UpstraUIKit.EkoViewController {
  public static func make(categoryId: Swift.String) -> UpstraUIKit.EkoCategoryCommunityListViewController
  @objc override dynamic public func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension EkoCategoryCommunityListViewController : UIKit.UITableViewDataSource {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension EkoCategoryCommunityListViewController : UIKit.UITableViewDelegate {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreGraphics.CGFloat
}
@objc @_inheritsConvenienceInitializers public class EkoPagerTabViewController : UpstraUIKit.EkoViewController, UIKit.UIScrollViewDelegate {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public var shouldAutomaticallyForwardAppearanceMethods: Swift.Bool {
    @objc get
  }
  @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @objc public func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
  @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum EkoPostTarget {
  case myFeed
  case community(object: UpstraUIKit.EkoCommunityModel)
}
@_hasMissingDesignatedInitializers public class EkoMyCommunityViewController {
  public static func make() -> UpstraUIKit.EkoViewController
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class EkoCommunityMemberSettingsViewController : UpstraUIKit.EkoPageViewController {
  @objc override final public func viewDidLoad()
  public static func make(communityId: Swift.String) -> UpstraUIKit.EkoCommunityMemberSettingsViewController
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class EkoPostCreateViewController : UpstraUIKit.EkoPostTextEditorViewController {
  public static func make(postTarget: UpstraUIKit.EkoPostTarget, settings: UpstraUIKit.EkoPostEditorSettings = EkoPostEditorSettings()) -> UpstraUIKit.EkoPostCreateViewController
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class EkoCommunityProfileEditViewController : UpstraUIKit.EkoViewController {
  public enum ViewType {
    case create
    case edit(communityId: Swift.String)
  }
  @objc override final public func viewDidLoad()
  public static func make(viewType: UpstraUIKit.EkoCommunityProfileEditViewController.ViewType) -> UpstraUIKit.EkoCommunityProfileEditViewController
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension EkoCommunityProfileEditViewController : UIKit.UITextFieldDelegate {
  @objc final public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
extension EkoCommunityProfileEditViewController {
  @objc final public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
extension EkoCommunityProfileEditViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
}
extension EkoCommunityProfileEditViewController : UIKit.UICollectionViewDataSource {
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension EkoCommunityProfileEditViewController : UIKit.UIImagePickerControllerDelegate & UIKit.UINavigationControllerDelegate {
  @objc final public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
}
@objc @_inheritsConvenienceInitializers @objcMembers public class Settings : ObjectiveC.NSObject {
  @objc public static let shared: UpstraUIKit.Settings
  @objc @_inheritsConvenienceInitializers public class Theme : ObjectiveC.NSObject {
    public var backgroundColor: UIKit.UIColor {
      get
      set
    }
    public var selectionFillColor: UIKit.UIColor {
      get
      set
    }
    public var selectionStrokeColor: UIKit.UIColor {
      get
      set
    }
    public var selectionShadowColor: UIKit.UIColor {
      get
      set
    }
    public enum SelectionStyle {
      case checked
      case numbered
      public static func == (a: UpstraUIKit.Settings.Theme.SelectionStyle, b: UpstraUIKit.Settings.Theme.SelectionStyle) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
    public var selectionStyle: UpstraUIKit.Settings.Theme.SelectionStyle {
      get
      set
    }
    public var previewTitleAttributes: [Foundation.NSAttributedString.Key : Any] {
      get
      set
    }
    public var previewSubtitleAttributes: [Foundation.NSAttributedString.Key : Any] {
      get
      set
    }
    public var albumTitleAttributes: [Foundation.NSAttributedString.Key : Any] {
      get
      set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class List : ObjectiveC.NSObject {
    public var cellsPerRow: (UIKit.UIUserInterfaceSizeClass, UIKit.UIUserInterfaceSizeClass) -> Swift.Int {
      get
      set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class Preview : ObjectiveC.NSObject {
    public var enabled: Swift.Bool {
      get
      set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class Fetch : ObjectiveC.NSObject {
    @objc @_inheritsConvenienceInitializers public class Album : ObjectiveC.NSObject {
      public var options: Photos.PHFetchOptions {
        get
        set
      }
      public var fetchResults: [Photos.PHFetchResult<Photos.PHAssetCollection>] {
        get
        set
      }
      @objc override dynamic public init()
      @objc deinit
    }
    @objc @_inheritsConvenienceInitializers public class Assets : ObjectiveC.NSObject {
      public enum MediaTypes {
        case image
        case video
        public static func == (a: UpstraUIKit.Settings.Fetch.Assets.MediaTypes, b: UpstraUIKit.Settings.Fetch.Assets.MediaTypes) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
        public func hash(into hasher: inout Swift.Hasher)
      }
      public var supportedMediaTypes: Swift.Set<UpstraUIKit.Settings.Fetch.Assets.MediaTypes> {
        get
        set
      }
      public var options: Photos.PHFetchOptions {
        get
        set
      }
      @objc override dynamic public init()
      @objc deinit
    }
    @objc @_inheritsConvenienceInitializers public class Preview : ObjectiveC.NSObject {
      public var photoOptions: Photos.PHImageRequestOptions {
        get
        set
      }
      public var livePhotoOptions: Photos.PHLivePhotoRequestOptions {
        get
        set
      }
      public var videoOptions: Photos.PHVideoRequestOptions {
        get
        set
      }
      @objc override dynamic public init()
      @objc deinit
    }
    public var album: UpstraUIKit.Settings.Fetch.Album {
      get
      set
    }
    public var assets: UpstraUIKit.Settings.Fetch.Assets {
      get
      set
    }
    public var preview: UpstraUIKit.Settings.Fetch.Preview {
      get
      set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class Dismiss : ObjectiveC.NSObject {
    public var enabled: Swift.Bool {
      get
      set
    }
    public var allowSwipe: Swift.Bool {
      get
      set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum EkoMessageTypes : Swift.CaseIterable {
  case textIncoming
  case textOutgoing
  case imageIncoming
  case imageOutgoing
  case audioIncoming
  case audioOutgoing
  public typealias AllCases = [UpstraUIKit.EkoMessageTypes]
  public static var allCases: [UpstraUIKit.EkoMessageTypes] {
    get
  }
  public static func == (a: UpstraUIKit.EkoMessageTypes, b: UpstraUIKit.EkoMessageTypes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers public class EkoColorPaletteTableViewController : UIKit.UITableViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc deinit
  @objc override dynamic public init(style: UIKit.UITableView.Style)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class EkoPhotoScrollView : UIKit.UIScrollView {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension EkoPhotoScrollView : UIKit.UIGestureRecognizerDelegate {
  @objc override dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class EkoView : UIKit.UIView {
  public var contentView: UIKit.UIView!
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class EkoPageViewController : UpstraUIKit.EkoButtonPagerTabSViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class EkoRecommendedCommunityViewController : UIKit.UIViewController {
  final public var selectedCommunityHandler: ((UpstraUIKit.EkoCommunityModel) -> Swift.Void)?
  final public var emptyDataHandler: ((Swift.Bool) -> Swift.Void)?
  @objc override final public func viewDidLoad()
  public static func make() -> UpstraUIKit.EkoRecommendedCommunityViewController
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension EkoRecommendedCommunityViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension EkoRecommendedCommunityViewController : UIKit.UICollectionViewDataSource {
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
@objc @_inheritsConvenienceInitializers final public class EkoExploreViewController : UpstraUIKit.EkoViewController {
  @objc override final public func viewDidLoad()
  public static func make() -> UpstraUIKit.EkoExploreViewController
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers public class EkoPostFeedTableViewCell : UIKit.UITableViewCell {
  @objc override dynamic public func awakeFromNib()
  @objc override dynamic public func prepareForReuse()
  @objc deinit
  @available(iOS 3.0, *)
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension EkoPostFeedTableViewCell : UpstraUIKit.EkoPhotoViewerControllerDataSource {
  @objc dynamic public func photoViewerController(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController, configureCell cell: UpstraUIKit.EkoPhotoCollectionViewCell, forPhotoAt index: Swift.Int)
  @objc dynamic public func photoViewerController(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController, referencedViewForPhotoAt index: Swift.Int) -> UIKit.UIView?
  @objc dynamic public func numberOfItems(in photoViewerController: UpstraUIKit.EkoPhotoViewerController) -> Swift.Int
  @objc dynamic public func photoViewerController(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController, configurePhotoAt index: Swift.Int, withImageView imageView: UIKit.UIImageView)
}
extension EkoPostFeedTableViewCell : UpstraUIKit.EkoPhotoViewerControllerDelegate {
  @objc dynamic public func photoViewerControllerDidEndPresentingAnimation(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController)
  @objc dynamic public func photoViewerController(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController, didScrollToPhotoAt index: Swift.Int)
}
extension EkoPostFeedTableViewCell : UpstraUIKit.EkoExpandableLabelDelegate {
  public func expandableLabeldidTap(_ label: UpstraUIKit.EkoExpandableLabel)
  public func willExpandLabel(_ label: UpstraUIKit.EkoExpandableLabel)
  public func didExpandLabel(_ label: UpstraUIKit.EkoExpandableLabel)
  public func willCollapseLabel(_ label: UpstraUIKit.EkoExpandableLabel)
  public func didCollapseLabel(_ label: UpstraUIKit.EkoExpandableLabel)
}
public struct EkoTypography {
  public init(headerLine: UIKit.UIFont = .systemFont(ofSize: 20, weight: .bold), title: UIKit.UIFont = .systemFont(ofSize: 17, weight: .semibold), bodyBold: UIKit.UIFont = .systemFont(ofSize: 15, weight: .semibold), body: UIKit.UIFont = .systemFont(ofSize: 15, weight: .regular), captionBold: UIKit.UIFont = .systemFont(ofSize: 13, weight: .semibold), caption: UIKit.UIFont = .systemFont(ofSize: 13, weight: .regular))
}
@objc @_inheritsConvenienceInitializers final public class EkoSelectMemberListViewController : UpstraUIKit.EkoViewController {
  @objc override final public func viewDidLoad()
  public static func make() -> UpstraUIKit.EkoSelectMemberListViewController
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension EkoSelectMemberListViewController : UIKit.UISearchBarDelegate {
  @objc final public func searchBar(_ searchBar: UIKit.UISearchBar, textDidChange searchText: Swift.String)
}
extension EkoSelectMemberListViewController : UIKit.UITableViewDelegate {
  @objc final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc final public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
}
extension EkoSelectMemberListViewController : UIKit.UITableViewDataSource {
  @objc final public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension EkoSelectMemberListViewController : UIKit.UICollectionViewDataSource {
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension EkoSelectMemberListViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class EkoPostEditViewController : UpstraUIKit.EkoPostTextEditorViewController {
  public static func make(withPostId postId: Swift.String, settings: UpstraUIKit.EkoPostEditorSettings = EkoPostEditorSettings()) -> UpstraUIKit.EkoPostEditViewController
  #warning("Should support init with postId")
  @objc deinit
}
#warning("FIXME: This class should be removed and all callers will be replaced with delegae or completion blocks.")
@objc @_inheritsConvenienceInitializers public class EkoPostDetailTableViewCell : UIKit.UITableViewCell {
  @objc @IBOutlet weak public var contentLabel: UpstraUIKit.EkoExpandableLabel!
  @objc override dynamic public func awakeFromNib()
  @objc override dynamic public func prepareForReuse()
  @objc deinit
  @available(iOS 3.0, *)
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension EkoPostDetailTableViewCell : UpstraUIKit.EkoPhotoViewerControllerDataSource {
  @objc dynamic public func photoViewerController(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController, configureCell cell: UpstraUIKit.EkoPhotoCollectionViewCell, forPhotoAt index: Swift.Int)
  @objc dynamic public func photoViewerController(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController, referencedViewForPhotoAt index: Swift.Int) -> UIKit.UIView?
  @objc dynamic public func numberOfItems(in photoViewerController: UpstraUIKit.EkoPhotoViewerController) -> Swift.Int
  @objc dynamic public func photoViewerController(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController, configurePhotoAt index: Swift.Int, withImageView imageView: UIKit.UIImageView)
}
extension EkoPostDetailTableViewCell : UpstraUIKit.EkoPhotoViewerControllerDelegate {
  @objc dynamic public func photoViewerControllerDidEndPresentingAnimation(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController)
  @objc dynamic public func photoViewerController(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController, didScrollToPhotoAt index: Swift.Int)
}
@objc @_hasMissingDesignatedInitializers public class EkoGlobalFeedViewController : UpstraUIKit.EkoViewController {
  public static func make() -> UpstraUIKit.EkoGlobalFeedViewController
  @objc override dynamic public func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
@objc @_inheritsConvenienceInitializers public class EkoProfileViewController : UpstraUIKit.EkoViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class EkoProfileBottomViewController : UpstraUIKit.EkoButtonPagerTabSViewController {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
public class EkoPostEditorSettings {
  public init()
  public var shouldCameraButtonHide: Swift.Bool
  public var shouldPhotoButtonHide: Swift.Bool
  public var shouldFileButtonHide: Swift.Bool
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class EkoPostTextEditorViewController : UpstraUIKit.EkoViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension EkoPostTextEditorViewController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
  @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
}
#warning("NOTED: Should improvements this class")
@objc @_hasMissingDesignatedInitializers public class EkoChatHomePageViewController : UpstraUIKit.EkoPageViewController {
  public var messageDataSource: UpstraUIKit.EkoMessageListDataSource? {
    get
    set
  }
  public static func make() -> UpstraUIKit.EkoChatHomePageViewController
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BottomSheetTitleView : UIKit.UIView, UpstraUIKit.BottomSheetComponent {
  public var titleLabel: UIKit.UILabel
  public var componentHeight: CoreGraphics.CGFloat {
    get
  }
  public var rightButtonAction: (() -> ())?
  public var rightButton: UIKit.UIButton
  public func setupRightButton()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class EkoCommunityFeedViewController : UpstraUIKit.EkoProfileBottomViewController {
  @objc override final public func viewDidLoad()
  public static func make(communityId: Swift.String) -> UpstraUIKit.EkoCommunityFeedViewController
  @objc deinit
}
public enum FeedType {
  case globalFeed
  case myFeed
  case userFeed(userId: Swift.String)
  case communityFeed(communityId: Swift.String)
}
@objc public protocol EkoPhotoViewerControllerDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func photoViewerController(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController, didScrollToPhotoAt index: Swift.Int)
  @objc optional func photoViewerController(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController, didZoomOnPhotoAtIndex: Swift.Int, atScale scale: CoreGraphics.CGFloat)
  @objc optional func photoViewerController(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController, didEndZoomingOnPhotoAtIndex: Swift.Int, atScale scale: CoreGraphics.CGFloat)
  @objc optional func photoViewerController(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController, willZoomOnPhotoAtIndex: Swift.Int)
  @objc optional func photoViewerControllerDidReceiveTapGesture(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController)
  @objc optional func photoViewerControllerDidReceiveDoubleTapGesture(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController)
  @objc optional func photoViewerController(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController, willBeginPanGestureRecognizer gestureRecognizer: UIKit.UIPanGestureRecognizer)
  @objc optional func photoViewerController(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController, didEndPanGestureRecognizer gestureRecognizer: UIKit.UIPanGestureRecognizer)
  @objc optional func photoViewerControllerDidEndPresentingAnimation(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController)
  @objc optional func photoViewerController(_ photoViewerController: UpstraUIKit.EkoPhotoViewerController, scrollViewDidScroll: UIKit.UIScrollView)
}
extension EkoImagePickerController : UIKit.UIAdaptivePresentationControllerDelegate {
  @available(iOS 13, *)
  @objc dynamic public func presentationControllerShouldDismiss(_ presentationController: UIKit.UIPresentationController) -> Swift.Bool
  @available(iOS 13, *)
  @objc dynamic public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
}
public protocol EkoImagePickerControllerDelegate : AnyObject {
  func imagePicker(_ imagePicker: UpstraUIKit.EkoImagePickerController, didSelectAsset asset: Photos.PHAsset)
  func imagePicker(_ imagePicker: UpstraUIKit.EkoImagePickerController, didDeselectAsset asset: Photos.PHAsset)
  func imagePicker(_ imagePicker: UpstraUIKit.EkoImagePickerController, didFinishWithAssets assets: [Photos.PHAsset])
  func imagePicker(_ imagePicker: UpstraUIKit.EkoImagePickerController, didCancelWithAssets assets: [Photos.PHAsset])
  func imagePicker(_ imagePicker: UpstraUIKit.EkoImagePickerController, didReachSelectionLimit count: Swift.Int)
}
open class EkoEventHandler {
  public init()
  open func communityDidTap(from source: UpstraUIKit.EkoViewController, communityId: Swift.String)
  open func channelDidTap(from source: UpstraUIKit.EkoViewController, channelId: Swift.String)
  open func communityChannelDidTap(from source: UpstraUIKit.EkoViewController, channelId: Swift.String)
  open func postDidtap(from source: UpstraUIKit.EkoViewController, postId: Swift.String)
  open func userDidTap(from source: UpstraUIKit.EkoViewController, userId: Swift.String)
  open func editUserDidTap(from source: UpstraUIKit.EkoViewController, userId: Swift.String)
  open func createPostDidTap(from source: UpstraUIKit.EkoViewController, postTarget: UpstraUIKit.EkoPostTarget)
  open func editPostDidTap(from source: UpstraUIKit.EkoViewController, postId: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class EkoGalleryCollectionViewCell : UIKit.UICollectionViewCell {
  @objc override dynamic public func awakeFromNib()
  @objc override dynamic public func prepareForReuse()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public struct EkoIconSet {
  public static var iconBack: UIKit.UIImage?
  public static var iconClose: UIKit.UIImage?
  public static var iconMessage: UIKit.UIImage?
  public static var iconCreate: UIKit.UIImage?
  public static var iconSearch: UIKit.UIImage?
  public static var iconCamera: UIKit.UIImage?
  public static let iconCameraSmall: UIKit.UIImage?
  public static var iconCommunity: UIKit.UIImage?
  public static var iconPrivateSmall: UIKit.UIImage?
  public static var iconLike: UIKit.UIImage?
  public static var iconComment: UIKit.UIImage?
  public static var iconShare: UIKit.UIImage?
  public static var iconPhoto: UIKit.UIImage?
  public static var iconAttach: UIKit.UIImage?
  public static let iconOption: UIKit.UIImage?
  public static var iconCreatePost: UIKit.UIImage?
  public static let iconBadgeCheckmark: UIKit.UIImage?
  public static let iconBadgeModerator: UIKit.UIImage?
  public static let iconReply: UIKit.UIImage?
  public static let iconExpand: UIKit.UIImage?
  public static let iconCheckMark: UIKit.UIImage?
  public static let iconExclamation: UIKit.UIImage?
  public struct File {
    public static var iconFileAudio: UIKit.UIImage?
    public static var iconFileAVI: UIKit.UIImage?
    public static var iconFileCSV: UIKit.UIImage?
    public static var iconFileDefault: UIKit.UIImage?
    public static var iconFileDoc: UIKit.UIImage?
    public static var iconFileEXE: UIKit.UIImage?
    public static var iconFileHTML: UIKit.UIImage?
    public static var iconFileMOV: UIKit.UIImage?
    public static var iconFileMP3: UIKit.UIImage?
    public static var iconFileMP4: UIKit.UIImage?
    public static var iconFileMPEG: UIKit.UIImage?
    public static var iconFilePDF: UIKit.UIImage?
    public static var iconFilePPT: UIKit.UIImage?
    public static var iconFilePPX: UIKit.UIImage?
    public static var iconFileRAR: UIKit.UIImage?
    public static var iconFileTXT: UIKit.UIImage?
    public static var iconFileXLS: UIKit.UIImage?
    public static var iconFileIMG: UIKit.UIImage?
    public static var iconFileZIP: UIKit.UIImage?
  }
  public static var emptyChat: UIKit.UIImage?
  public static var iconSendMessage: UIKit.UIImage?
  public static var defaultPrivateCommunityChat: UIKit.UIImage?
  public static var defaultPublicCommunityChat: UIKit.UIImage?
  public static var defaultAvatar: UIKit.UIImage?
  public static var defaultGroupChat: UIKit.UIImage?
  public static var defaultCategory: UIKit.UIImage?
  public static var iconSetting: UIKit.UIImage?
  public static var iconDeleteMessage: UIKit.UIImage?
  public static var emptyNewsfeed: UIKit.UIImage?
}
extension UpstraUIKit.EkoAvatarState : Swift.Equatable {}
extension UpstraUIKit.EkoAvatarState : Swift.Hashable {}
extension UpstraUIKit.EkoNavigationBarType : Swift.Equatable {}
extension UpstraUIKit.EkoNavigationBarType : Swift.Hashable {}
extension UpstraUIKit.EkoExpandableLabel.TextReplacementType : Swift.Equatable {}
extension UpstraUIKit.EkoExpandableLabel.TextReplacementType : Swift.Hashable {}
extension UpstraUIKit.EkoButton.Position : Swift.Equatable {}
extension UpstraUIKit.EkoButton.Position : Swift.Hashable {}
extension UpstraUIKit.Settings.Theme.SelectionStyle : Swift.Equatable {}
extension UpstraUIKit.Settings.Theme.SelectionStyle : Swift.Hashable {}
extension UpstraUIKit.Settings.Fetch.Assets.MediaTypes : Swift.Equatable {}
extension UpstraUIKit.Settings.Fetch.Assets.MediaTypes : Swift.Hashable {}
extension UpstraUIKit.EkoMessageTypes : Swift.Equatable {}
extension UpstraUIKit.EkoMessageTypes : Swift.Hashable {}
